{
  
    
        "post0": {
            "title": "My RDKit Cheatsheet",
            "content": "Setup . The RDKit pacakge only supports conda installation. . !conda install -c rdkit rdkit -y . Install Conda and RDKit in Google Colab: . !wget -c https://repo.continuum.io/miniconda/Miniconda3-py37_4.8.3-Linux-x86_64.sh !chmod +x Miniconda3-py37_4.8.3-Linux-x86_64.sh !time bash ./Miniconda3-py37_4.8.3-Linux-x86_64.sh -b -f -p /usr/local !time conda install -c rdkit rdkit -y import sys sys.path.append(&#39;/usr/local/lib/python3.7/site-packages/&#39;) . Basic . import rdkit from rdkit import Chem from rdkit.Chem import AllChem from rdkit.Chem import Draw from rdkit.Chem.Draw import IPythonConsole rdkit.__version__ . &#39;2020.03.1&#39; . Chem vs. AllChem . As mentioned in the Getting Started: . The majority of ‚Äúbasic‚Äù chemical functionality (e.g. reading/writing molecules, substructure searching, molecular cleanup, etc.) is in the rdkit.Chem module. More advanced, or less frequently used, functionality is in rdkit.Chem.AllChem. . If you find the Chem/AllChem thing annoying or confusing, you can use python‚Äôs ‚Äúimport ‚Ä¶ as ‚Ä¶‚Äù syntax to remove the irritation:python from rdkit.Chem import AllChem as Chem . Get a RDKit molecule from SMILES. RDKit molecule enable several features to handle molecules: drawing, computing fingerprints/properties, molecular curation etc. . smiles = &#39;COC(=O)c1c[nH]c2cc(OC(C)C)c(OC(C)C)cc2c1=O&#39; mol = Chem.MolFromSmiles(smiles) print(mol) . &lt;rdkit.Chem.rdchem.Mol object at 0x000001B5567C7260&gt; . The RDKit molecules can be directly printed in jupyter enviroment. . mol . Convert a RDKit molecule to SMILES. . smi = Chem.MolToSmiles(mol) smi . &#39;COC(=O)c1c[nH]c2cc(OC(C)C)c(OC(C)C)cc2c1=O&#39; . Convert a RDKit molecule to InchiKey. . Chem.MolToInchiKey(mol) . &#39;VSIUFPQOEIKNCY-UHFFFAOYSA-N&#39; . Convert a RDKit molecule to coordinative representation (which can be stored in .sdf file). . mol_block = Chem.MolToMolBlock(mol) print(mol_block) . RDKit 2D 23 24 0 0 0 0 0 0 0 0999 V2000 5.2500 -1.2990 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0 3.7500 -1.2990 0.0000 O 0 0 0 0 0 0 0 0 0 0 0 0 3.0000 0.0000 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0 3.7500 1.2990 0.0000 O 0 0 0 0 0 0 0 0 0 0 0 0 1.5000 0.0000 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0 0.7500 -1.2990 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0 -0.7500 -1.2990 0.0000 N 0 0 0 0 0 0 0 0 0 0 0 0 -1.5000 0.0000 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0 -3.0000 0.0000 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0 -3.7500 1.2990 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0 -5.2500 1.2990 0.0000 O 0 0 0 0 0 0 0 0 0 0 0 0 -6.0000 0.0000 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0 -7.5000 0.0000 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0 -5.2500 -1.2990 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0 -3.0000 2.5981 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0 -3.7500 3.8971 0.0000 O 0 0 0 0 0 0 0 0 0 0 0 0 -3.0000 5.1962 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0 -3.7500 6.4952 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0 -1.5000 5.1962 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0 -1.5000 2.5981 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0 -0.7500 1.2990 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0 0.7500 1.2990 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0 1.5000 2.5981 0.0000 O 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 0 2 3 1 0 3 4 2 0 3 5 1 0 5 6 2 0 6 7 1 0 7 8 1 0 8 9 2 0 9 10 1 0 10 11 1 0 11 12 1 0 12 13 1 0 12 14 1 0 10 15 2 0 15 16 1 0 16 17 1 0 17 18 1 0 17 19 1 0 15 20 1 0 20 21 2 0 21 22 1 0 22 23 2 0 22 5 1 0 21 8 1 0 M END . . SMILES Canonicalization . Chem.MolToSmiles(Chem.MolFromSmiles(smi)) . &#39;COC(=O)c1c[nH]c2cc(OC(C)C)c(OC(C)C)cc2c1=O&#39; . Reading sets of molecules . Major types of molecular file formats: . .csv file that includes a column of SMILES. See PandasTools section. | .smi/.txt file that includes SMILES. Collect the SMILES as a list. The following code is an example to read a .smi file that contains one SMILES per line. | file_name = &#39;somedata.smi&#39; with open(file_name, &quot;r&quot;) as ins: smiles = [] for line in ins: smiles.append(line.split(&#39; n&#39;)[0]) print(&#39;# of SMILES:&#39;, len(smiles)) . .sdf file that includes atom coordinates. Reading molecules from .sdf file. Code Example | Draw molecules in Jupter environment . Print molecules in grid. . smiles = [ &#39;N#CC(OC1OC(COC2OC(CO)C(O)C(O)C2O)C(O)C(O)C1O)c1ccccc1&#39;, &#39;c1ccc2c(c1)ccc1c2ccc2c3ccccc3ccc21&#39;, &#39;C=C(C)C1Cc2c(ccc3c2OC2COc4cc(OC)c(OC)cc4C2C3=O)O1&#39;, &#39;ClC(Cl)=C(c1ccc(Cl)cc1)c1ccc(Cl)cc1&#39; ] mols = [Chem.MolFromSmiles(smi) for smi in smiles] . Draw.MolsToGridImage(mols, molsPerRow=2, subImgSize=(200, 200)) . Disable Error Message . from rdkit import RDLogger RDLogger.DisableLog(&#39;rdApp.*&#39;) . PandasTools . PandasTools enables using RDKit molecules as columns of a Pandas Dataframe. . import pandas as pd from rdkit.Chem import PandasTools . url = &#39;https://raw.githubusercontent.com/XinhaoLi74/molds/master/clean_data/ESOL.csv&#39; esol_data = pd.read_csv(url) esol_data.head(1) . smiles logSolubility . 0 N#CC(OC1OC(COC2OC(CO)C(O)C(O)C2O)C(O)C(O)C1O)c... | -0.77 | . Add ROMol to Pandas Dataframe. . PandasTools.AddMoleculeColumnToFrame(esol_data, smilesCol=&#39;smiles&#39;) esol_data.head(1) . smiles logSolubility ROMol . 0 N#CC(OC1OC(COC2OC(CO)C(O)C(O)C2O)C(O)C(O)C1O)c... | -0.77 | | . ROMol column stores rdchem.Mol object. . print(type(esol_data.ROMol[0])) . &lt;class &#39;rdkit.Chem.rdchem.Mol&#39;&gt; . Draw the structures in grid. . PandasTools.FrameToGridImage(esol_data.head(8), legendsCol=&quot;logSolubility&quot;, molsPerRow=4) . Adding new columns of properites use Pandas map method. . esol_data[&quot;n_Atoms&quot;] = esol_data[&#39;ROMol&#39;].map(lambda x: x.GetNumAtoms()) esol_data.head(1) . smiles logSolubility ROMol n_Atoms . 0 N#CC(OC1OC(COC2OC(CO)C(O)C(O)C2O)C(O)C(O)C1O)c... | -0.77 | | 32 | . Before saving the dataframe as csv file, it is recommanded to drop the ROMol column. . esol_data = esol_data.drop([&#39;ROMol&#39;], axis=1) esol_data.head(1) . smiles logSolubility n_Atoms . 0 N#CC(OC1OC(COC2OC(CO)C(O)C(O)C2O)C(O)C(O)C1O)c... | -0.77 | 32 | . Descriptors/Fingerprints . The RDKit has a variety of built-in functionality for generating molecular fingerprints/descriptors. A detialed description can be found here. . url = &#39;https://raw.githubusercontent.com/XinhaoLi74/molds/master/clean_data/ESOL.csv&#39; esol_data = pd.read_csv(url) PandasTools.AddMoleculeColumnToFrame(esol_data, smilesCol=&#39;smiles&#39;) esol_data.head(1) . smiles logSolubility ROMol . 0 N#CC(OC1OC(COC2OC(CO)C(O)C(O)C2O)C(O)C(O)C1O)c... | -0.77 | | . Morgan Fingerprint (ECFPx) . AllChem.GetMorganFingerprintAsBitVect Parameters: . radius: no default value, usually set 2 for similarity search and 3 for machine learning. | nBits: number of bits, default is 2048. 1024 is also widely used. | other parameterss are ususlly left to default | More examples can be found in this notebook from my previous work. . radius=3 nBits=1024 ECFP6 = [AllChem.GetMorganFingerprintAsBitVect(x,radius=radius, nBits=nBits) for x in esol_data[&#39;ROMol&#39;]] . ECFP6[0] . &lt;rdkit.DataStructs.cDataStructs.ExplicitBitVect at 0x1b558794580&gt; . ECFP6 fingerprint for each molecule has 1024 bits. . len(ECFP6[0]) . 1024 . Save as a .csv file for futher use (e.g., machine learning). I usually save (1) SMILES as index and (2) each bit as a column to the csv file. . ecfp6_name = [f&#39;Bit_{i}&#39; for i in range(nBits)] ecfp6_bits = [list(l) for l in ECFP6] df_morgan = pd.DataFrame(ecfp6_bits, index = esol_data.smiles, columns=ecfp6_name) df_morgan.head(1) . Bit_0 Bit_1 Bit_2 Bit_3 Bit_4 Bit_5 Bit_6 Bit_7 Bit_8 Bit_9 ... Bit_1014 Bit_1015 Bit_1016 Bit_1017 Bit_1018 Bit_1019 Bit_1020 Bit_1021 Bit_1022 Bit_1023 . smiles . N#CC(OC1OC(COC2OC(CO)C(O)C(O)C2O)C(O)C(O)C1O)c1ccccc1 0 | 1 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | . 1 rows √ó 1024 columns . . Similarity Search . Compute the similarity of a reference molecule and a list of molecules. Here is an example of using ECFP4 fingerprint to compute the Tanimoto Similarity (the default metric of DataStructs.FingerprintSimilarity. . compute fingerprints | ref_smiles = &#39;COC(=O)c1c[nH]c2cc(OC(C)C)c(OC(C)C)cc2c1=O&#39; ref_mol = Chem.MolFromSmiles(ref_smiles) ref_ECFP4_fps = AllChem.GetMorganFingerprintAsBitVect(ref_mol,2) . ref_mol . bulk_ECFP4_fps = [AllChem.GetMorganFingerprintAsBitVect(x,2) for x in esol_data[&#39;ROMol&#39;]] . from rdkit import DataStructs similarity_efcp4 = [DataStructs.FingerprintSimilarity(ref_ECFP4_fps,x) for x in bulk_ECFP4_fps] . We can also add the similarity_efcp4 to the dataframe and visualize the structure and similarity. . esol_data[&#39;Tanimoto_Similarity (ECFP4)&#39;] = similarity_efcp4 PandasTools.FrameToGridImage(esol_data.head(8), legendsCol=&quot;Tanimoto_Similarity (ECFP4)&quot;, molsPerRow=4) . Sort the result from highest to lowest. . esol_data = esol_data.sort_values([&#39;Tanimoto_Similarity (ECFP4)&#39;], ascending=False) PandasTools.FrameToGridImage(esol_data.head(8), legendsCol=&quot;Tanimoto_Similarity (ECFP4)&quot;, molsPerRow=4) . More Reading . Offical documentation. | Getting Started with the RDKit in Python | The RDKit Book | RDKit CookbookThis document provides example recipes of how to carry out particular tasks using the RDKit functionality from Python. The contents have been contributed by the RDKit community, tested with the latest RDKit release, and then compiled into this document. . |",
            "url": "https://xinhaoli74.github.io/blog/rdkit/2021/01/06/rdkit.html",
            "relUrl": "/rdkit/2021/01/06/rdkit.html",
            "date": " ‚Ä¢ Jan 6, 2021"
        }
        
    
  
    
  
    
  

  
  

  
      ,"page1": {
          "title": "üìì Code Snippets",
          "content": "A personal collection of reusable code snippets. . Tag Description Colab . rdkit | Generating Descriptors using RDKit | | .",
          "url": "https://xinhaoli74.github.io/blog/code/",
          "relUrl": "/code/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
      ,"page7": {
          "title": "„äôÔ∏è About Me",
          "content": "",
          "url": "https://xinhaoli74.github.io/blog/z_about/",
          "relUrl": "/z_about/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ ‚Äúsitemap.xml‚Äù | absolute_url }} | .",
          "url": "https://xinhaoli74.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}