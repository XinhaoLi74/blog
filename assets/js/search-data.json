{
  
    
        "post0": {
            "title": "My RDKit Cheatsheet",
            "content": "Setup . The RDKit pacakge only supports conda installation. . !conda install -c rdkit rdkit -y . Install Conda and RDKit in Google Colab: . !wget -c https://repo.continuum.io/miniconda/Miniconda3-py37_4.8.3-Linux-x86_64.sh !chmod +x Miniconda3-py37_4.8.3-Linux-x86_64.sh !time bash ./Miniconda3-py37_4.8.3-Linux-x86_64.sh -b -f -p /usr/local !time conda install -c rdkit rdkit -y import sys sys.path.append(&#39;/usr/local/lib/python3.7/site-packages/&#39;) . Basic . import rdkit from rdkit import Chem from rdkit.Chem import AllChem from rdkit.Chem import Draw from rdkit.Chem.Draw import IPythonConsole rdkit.__version__ . Chem vs. AllChem . As mentioned in the Getting Started: . The majority of “basic” chemical functionality (e.g. reading/writing molecules, substructure searching, molecular cleanup, etc.) is in the rdkit.Chem module. More advanced, or less frequently used, functionality is in rdkit.Chem.AllChem. . If you find the Chem/AllChem thing annoying or confusing, you can use python’s “import … as …” syntax to remove the irritation:python from rdkit.Chem import AllChem as Chem . Get a RDKit molecule from SMILES. RDKit molecule enable several features to handle molecules: drawing, computing fingerprints/properties, molecular curation etc. . smiles = &#39;COC(=O)c1c[nH]c2cc(OC(C)C)c(OC(C)C)cc2c1=O&#39; mol = Chem.MolFromSmiles(smiles) print(mol) . The RDKit molecules can be directly printed in jupyter enviroment. . mol . Convert a RDKit molecule to SMILES. . smi = Chem.MolToSmiles(mol) smi . Convert a RDKit molecule to InchiKey. . Chem.MolToInchiKey(mol) . Convert a RDKit molecule to coordinative representation (which can be stored in .sdf file). . mol_block = Chem.MolToMolBlock(mol) print(mol_block) . SMILES Canonicalization . Chem.MolToSmiles(Chem.MolFromSmiles(smi)) . Reading sets of molecules . Major types of molecular file formats: . .csv file that includes a column of SMILES. See PandasTools section. | .smi/.txt file that includes SMILES. Collect the SMILES as a list. The following code is an example to read a .smi file that contains one SMILES per line. | file_name = &#39;somedata.smi&#39; with open(file_name, &quot;r&quot;) as ins: smiles = [] for line in ins: smiles.append(line.split(&#39; n&#39;)[0]) print(&#39;# of SMILES:&#39;, len(smiles)) . .sdf file that includes atom coordinates. Reading molecules from .sdf file. Code Example | Draw molecules in Jupter environment . Print molecules in grid. . smiles = [ &#39;N#CC(OC1OC(COC2OC(CO)C(O)C(O)C2O)C(O)C(O)C1O)c1ccccc1&#39;, &#39;c1ccc2c(c1)ccc1c2ccc2c3ccccc3ccc21&#39;, &#39;C=C(C)C1Cc2c(ccc3c2OC2COc4cc(OC)c(OC)cc4C2C3=O)O1&#39;, &#39;ClC(Cl)=C(c1ccc(Cl)cc1)c1ccc(Cl)cc1&#39; ] mols = [Chem.MolFromSmiles(smi) for smi in smiles] . Draw.MolsToGridImage(mols, molsPerRow=2, subImgSize=(200, 200)) . Disable Error Message . from rdkit import RDLogger RDLogger.DisableLog(&#39;rdApp.*&#39;) . PandasTools . PandasTools enables using RDKit molecules as columns of a Pandas Dataframe. . import pandas as pd from rdkit.Chem import PandasTools . url = &#39;https://raw.githubusercontent.com/XinhaoLi74/molds/master/clean_data/ESOL.csv&#39; esol_data = pd.read_csv(url) esol_data.head(1) . Add ROMol to Pandas Dataframe. . PandasTools.AddMoleculeColumnToFrame(esol_data, smilesCol=&#39;smiles&#39;) esol_data.head(1) . ROMol column stores rdchem.Mol object. . print(type(esol_data.ROMol[0])) . Draw the structures in grid. . PandasTools.FrameToGridImage(esol_data.head(8), legendsCol=&quot;logSolubility&quot;, molsPerRow=4) . Adding new columns of properites use Pandas map method. . esol_data[&quot;n_Atoms&quot;] = esol_data[&#39;ROMol&#39;].map(lambda x: x.GetNumAtoms()) esol_data.head(1) . Before saving the dataframe as csv file, it is recommanded to drop the ROMol column. . esol_data = esol_data.drop([&#39;ROMol&#39;], axis=1) esol_data.head(1) . Descriptors/Fingerprints . The RDKit has a variety of built-in functionality for generating molecular fingerprints/descriptors. A detialed description can be found here. . url = &#39;https://raw.githubusercontent.com/XinhaoLi74/molds/master/clean_data/ESOL.csv&#39; esol_data = pd.read_csv(url) PandasTools.AddMoleculeColumnToFrame(esol_data, smilesCol=&#39;smiles&#39;) esol_data.head(1) . Morgan Fingerprint (ECFPx) . AllChem.GetMorganFingerprintAsBitVect Parameters: . radius: no default value, usually set 2 for similarity search and 3 for machine learning. | nBits: number of bits, default is 2048. 1024 is also widely used. | other parameterss are ususlly left to default | More examples can be found in this notebook from my previous work. . radius=3 nBits=1024 ECFP6 = [AllChem.GetMorganFingerprintAsBitVect(x,radius=radius, nBits=nBits) for x in esol_data[&#39;ROMol&#39;]] . ECFP6[0] . ECFP6 fingerprint for each molecule has 1024 bits. . len(ECFP6[0]) . Save as a .csv file for futher use (e.g., machine learning). I usually save (1) SMILES as index and (2) each bit as a column to the csv file. . ecfp6_name = [f&#39;Bit_{i}&#39; for i in range(nBits)] ecfp6_bits = [list(l) for l in ECFP6] df_morgan = pd.DataFrame(ecfp6_bits, index = esol_data.smiles, columns=ecfp6_name) df_morgan.head(1) . ECFP6 (Count version) . ECFP6_counts = [AllChem.GetHashedMorganFingerprint(m,radius=radius, nBits=nBits) for m in mols] print(ECFP6_counts[0]) print(len(list(ECFP6_counts[0]))) print(list(ECFP6_counts[0])) . MACCS Keys . from rdkit.Chem import MACCSkeys maccs_keys = [MACCSkeys.GenMACCSKeys(m) for m in mols] print(maccs_keys[0]) print(len(maccs_keys[0])) print(list(maccs_keys[0])) . Molecular Quantun Numbers (MQN) Descriptors . from rdkit.Chem import rdMolDescriptors mqn_ds = [rdMolDescriptors.MQNs_(m) for m in mols] print(len(mqn_ds[0])) print(mqn_ds[0]) . RDKit 2D Descriptors . from rdkit.Chem import Descriptors desc_list = [n[0] for n in Descriptors._descList] print(len(desc_list)) print(desc_list) . from rdkit.ML.Descriptors import MoleculeDescriptors calc = MoleculeDescriptors.MolecularDescriptorCalculator(desc_list) rdkit_desc = [calc.CalcDescriptors(m) for m in mols] print(len(rdkit_desc[0])) print(rdkit_desc[0]) . In total, we got 208 descriptors. There are two major categories: (1) physicochemical properties and (2) Fraction of a substructure (e.g., &#39;fr_Al_COO&#39;). For most of the molecules, you will get a lot zeros for the 2nd category descriptors. The following code will only compute the 1st category descriptors. . phc_desc = [i for i in desc_list if not i.startswith(&#39;fr_&#39;)] len(phc_desc) print(phc_desc) . calc = MoleculeDescriptors.MolecularDescriptorCalculator(phc_desc) rdkit_desc_sub = [calc.CalcDescriptors(m) for m in mols] print(len(rdkit_desc_sub[0])) print(rdkit_desc_sub[0]) . Similarity Search . Compute the similarity of a reference molecule and a list of molecules. Here is an example of using ECFP4 fingerprint to compute the Tanimoto Similarity (the default metric of DataStructs.FingerprintSimilarity. . compute fingerprints | ref_smiles = &#39;COC(=O)c1c[nH]c2cc(OC(C)C)c(OC(C)C)cc2c1=O&#39; ref_mol = Chem.MolFromSmiles(ref_smiles) ref_ECFP4_fps = AllChem.GetMorganFingerprintAsBitVect(ref_mol,2) . ref_mol . bulk_ECFP4_fps = [AllChem.GetMorganFingerprintAsBitVect(x,2) for x in esol_data[&#39;ROMol&#39;]] . from rdkit import DataStructs similarity_efcp4 = [DataStructs.FingerprintSimilarity(ref_ECFP4_fps,x) for x in bulk_ECFP4_fps] . We can also add the similarity_efcp4 to the dataframe and visualize the structure and similarity. . esol_data[&#39;Tanimoto_Similarity (ECFP4)&#39;] = similarity_efcp4 PandasTools.FrameToGridImage(esol_data.head(8), legendsCol=&quot;Tanimoto_Similarity (ECFP4)&quot;, molsPerRow=4) . Sort the result from highest to lowest. . esol_data = esol_data.sort_values([&#39;Tanimoto_Similarity (ECFP4)&#39;], ascending=False) PandasTools.FrameToGridImage(esol_data.head(8), legendsCol=&quot;Tanimoto_Similarity (ECFP4)&quot;, molsPerRow=4) . Substructure Search . Native Method . This method is suitable for search substructures in a small dataset. The query substructure can be built from either SMILES or SMARTS. But the semantics of them are not exactly equivalent. In practice, SMARTS is more commonly used. . m = Chem.MolFromSmiles(&#39;c1ccccc1O&#39;) patt = Chem.MolFromSmarts(&#39;ccO&#39;) m.HasSubstructMatch(patt) . Here is an exmaple to find the matched molecules from a dataset. . patt = Chem.MolFromSmarts(&#39;c1ccncn1&#39;) patt . matches = [m for m in esol_data[&#39;ROMol&#39;] if m.HasSubstructMatch(patt)] print(f&#39;There are {len(matches)} matched molecules&#39;) matches[0] . SubstructLibrary . A reading list for this topics: . Introducing the SubstructLibrary | A couple of substructure search topics | The secrets of fast SMARTS matching | . MCS . from rdkit.Chem import rdFMCS smiles = [ &#39;N#CC(OC1OC(COC2OC(CO)C(O)C(O)C2O)C(O)C(O)C1O)c1ccccc1&#39;, &#39;c1ccc2c(c1)ccc1c2ccc2c3ccccc3ccc21&#39;, &#39;C=C(C)C1Cc2c(ccc3c2OC2COc4cc(OC)c(OC)cc4C2C3=O)O1&#39;, &#39;ClC(Cl)=C(c1ccc(Cl)cc1)c1ccc(Cl)cc1&#39; ] mols = [Chem.MolFromSmiles(smi) for smi in smiles] res = rdFMCS.FindMCS(mols) res.smartsString . res_mol = Chem.MolFromSmarts(res.smartsString) res_mol . Highlight the MCS in molecules. . highlight_mcs = [mMol.GetSubstructMatch(res_mol) for mMol in mols] Draw.MolsToGridImage(mols, highlightAtomLists = highlight_mcs, subImgSize=(250,250), useSVG=False, molsPerRow=4) . Molecular Transformations . Molecular Decomposition . More Reading . Offical documentation. | Getting Started with the RDKit in Python | The RDKit Book | RDKit CookbookThis document provides example recipes of how to carry out particular tasks using the RDKit functionality from Python. The contents have been contributed by the RDKit community, tested with the latest RDKit release, and then compiled into this document. . |",
            "url": "https://xinhaoli74.github.io/blog/rdkit/2021/01/06/rdkit.html",
            "relUrl": "/rdkit/2021/01/06/rdkit.html",
            "date": " • Jan 6, 2021"
        }
        
    
  
    
  
    
  
    
        ,"post3": {
            "title": "Title",
            "content": "&gt; Titile - toc: true - badges: true - comments: true # a list of tags - categories: [jupyter] # change to false when ready to publish - hide: true - search_exclude: true # put a cover image in the /images folder - image: images/chart-preview.png .",
            "url": "https://xinhaoli74.github.io/blog/2020/01/01/template.html",
            "relUrl": "/2020/01/01/template.html",
            "date": " • Jan 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "📓 Code Snippets",
          "content": "A personal collection of reusable code snippets. . Tag Description Colab . rdkit | Generating Descriptors using RDKit | | .",
          "url": "https://xinhaoli74.github.io/blog/code/",
          "relUrl": "/code/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "📓 Reading",
          "content": "A personal collection of articles/blogs/videos. . 2021-01 . ML and NLP Research Highlights of 2020 by SEBASTIAN RUDER. . | AI in Drug Discovery 2020 - A Highly Opinionated Literature Review by Patrick Walters . | MLOps Tutorial 1-6: a series of tutorial on Data Version Control (DVC) and Continuous Machine Learning (CML) . youtube: https://www.youtube.com/watch?v=9BgIDqAzfuA&amp;t=798s . | .",
          "url": "https://xinhaoli74.github.io/blog/reading/",
          "relUrl": "/reading/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
      ,"page8": {
          "title": "㊙️ About Me",
          "content": "",
          "url": "https://xinhaoli74.github.io/blog/z_about/",
          "relUrl": "/z_about/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://xinhaoli74.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}